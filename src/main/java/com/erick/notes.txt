

update: change Path2D.Double to Curve2D.Float so they can be updated easier


//
what to use REST api for...

make a sign in website and profile. save stuff to profile. sign in through app/website.

download custom proportion templates, brushes etc.

-----------------------

Database of proportions, brushes, stroke styles

------------------------------------------

build proportions and brushes and strokes in program.
CV's have properties/rules
ex: "lock to nearest 'ink'" at offset [x] at angle [x]

------------------------------------------

big thing is to be able to rotate polygon tool 3d

-----------------------------------------

delete lines and points generated
add "hide clusters" which hides strokes that travel a minimal distance

INSTANCE (loads, saves)

FILE (model) // initially "untitled"
    TEXTURE (list)
        COMPONENT (list)
        CASTER (list)
            TRACER (does intersection tests) //can cast 3d rays
            PATHER (handles creating stroke previews etc)
            BRUSHER (handles rendering of lines, splatters, etc)
        SURFACE (list)
        STRUCTURE (morphing/distortion) (creates geometry)
            (generates 3D shading, and enforces proportions)
            (acts on curves)
            (lattice tools)


DESIGNATE an areaas a "surface"
    give the surface a 3D angle, and length
    a depth map
    "shading" is actually deformation of mesh under lighting

    YOU ARE ABLE TO TOGGLE "DRAW REVERSE OF SURFACE" or "BEHIND SURFACE" (pop up or in window)
    for lighting or reflection purposes. updates main image in real time

    once something is declared a surface, you can hid it to paint behind it, or tell it to cast shadows
    receive reflections, etc.

everything needs to be able to generate geometry
    for lighting, and shadoww


    Interface //?
        selected_file()
        selected_texture() // if no para, return current, else change
        selected_component()
        selected_caster()

        selected_caster().flip()
        selected_caster().set_ray_count(100)

        // Example
        new move_tool() // called by controller
        move_tool.select(x1,y1)
        move_tool.update(x2,y2)
        move_tool.update(x3,y3)
        move_tool.dispose()

        c=new create_caster()
        c.update(x1,y1)
        c.update(x2,y2)
        c.get_result()



GUI (view)
    Canvas Panel
    Action/Tool Panel
    Selected Attributes Panel
    Layer Panel
    Caster Panel
        Stroke Panel
        Brush Panel
        Structure Panel

CONTROLLER (listeners) (logic)
    get_input_from_view_panels
    send_input_to_model_file
    update_view_from_model (sliders, new buffers)


---------------------------------------------------------------

JavaFX

---------------------------------------------------------------

Caster--generates intersections with components
    passes intersection points to Pather
        Pather generates curves
        Passes curves to Brusher
            Brusher paints along curves



Steps to alpha

Add 
    -Stroke Panel
        -some how integrate serum bar style
        -for repetition in main
    -move+scale+rotate tool
    -basic paint functionality
    -save/load 
    -caster interweave
    -cast press

Imporove
    -interface

Steps to beta

Add
    -colors
    -splatters
    -structures
    -polygon tools
    -lighting
    -proportion tools


-------
base curve info
    (cast style)
    along_rays
    along_surface


STRETCH FEATURES

STICK_AS_CAST -- you can move the tool, 
    and the points will still be attached where they first struck

CAST_HAIR -- as complex and simple as in 3D rendering programs

CAST_CLOTH

CAST_BRUSH